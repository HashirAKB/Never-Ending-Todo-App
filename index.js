/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const app = express();
  app.use(bodyParser.json());
  const logger = require('./logger');

  const {updateTodoFile, getDataFromFile} = require('./todoManage');
  
  const port = 3000;

  app.get('/todos', async (req, res) => {
    try{
      let todoList = await getDataFromFile();
      logger.info("From getTodos: "+todoList);
      res.status(200).json(todoList);
    }
    catch(error){
        logger.error({
            code: 'TODO_FETCH_FAILED',
            message: `Failed to retrieve todo list`,
            error: error
        });
        res.status(500).json({"error": "Failed to retrieve todo list"});
    }
  });
  
  app.get('/todos/:id', async (req, res) => {
    try{
      let todoList = await getDataFromFile();
      let todo = todoList.find(item => item.id == req.params.id);
      if (todo){
          logger.info("Retrieved todo successfully:", todo);
          res.status(200).json(todo);
      }
      else{
          logger.warn("Requested item not found with id: ", req.params.id);
          res.status(404).json({"Error": "Requested Item not found."});
      }
  }
  catch(error){
      logger.error({
          code: 'TODO_ITEM_FETCH_FAILED',
          message: `Failed to retrieve todo list with id: ${req.params.id}`,
          error: error
      });
      res.status(500).json({"error": "Failed to retrieve todo item with id:"+req.params.id});
  }
  });
  
  app.post('/todos',async (req, res) => {
    try{
      let newTodo = req.body;
      newTodo.id = Math.floor(Math.random() * 1000000);
      let todoList = await getDataFromFile();
      todoList.push(newTodo);
      updateTodoFile(todoList);
      logger.info("Added new todo:"+newTodo);
      res.status(201).json(newTodo);
  }
  catch(error){
      logger.error({
          code: 'TODO_ITEM_INSERTION_FAILED',
          message: `Failed to insert new todo to list `,
          error: error
      });
      res.status(500).json({"error": "Failed to insert new todo to list"});  
  }
  });
  
  app.put('/todos/:id', async (req, res) => {
    try {
      const todoList = await getDataFromFile();
      const index = todoList.findIndex(item => item.id == parseInt(req.params.id));
      if (index !== -1) {
          todoList[index] = { ...todoList[index], ...req.body };
          await updateTodoFile(todoList);
          logger.info("Updated todo:", todoList[index]);
          res.status(200).json(todoList);
      } else {
          logger.warn("Todo item not found with ID:", req.params.id);
          res.status(404).json({ error: "Todo item not found." });
      }
  } catch (error) {
      logger.error({
          code: 'TODO_ITEM_UPDATION_FAILED',
          message: `Failed to update todo with id: ${req.params.id}to list `,
          error: error
      });
      res.status(500).json({ error: "Failed to update todo item." });
  }
  });
  
  app.delete('/todos/:id', async (req, res) => {
    try {
      const todoList = await getDataFromFile();
      const index = todoList.findIndex(item => item.id == parseInt(req.params.id));
      if (index !== -1) {
          todoList.splice(index, 1);
          await updateTodoFile(todoList);
          logger.info("Deleted todo item with ID:", req.params.id);
          res.status(200).json(todoList);
      } else {
          logger.warn("Todo item not found with ID:", req.params.id);
          res.status(404).json({ error: "Todo item not found." });
      }
  } catch (error) {
      logger.error({
          code: 'TODO_ITEM_DELETE_FAILED',
          message: `Failed to delete todo with id: ${req.params.id} `,
          error: error
      });
      // logger.error("Failed to delete todo item:", error);
      res.status(500).json({ error: "Failed to delete todo item with id: "+req.params.id});
  }
  });
  
  app.use((req, res, next) => {
    res.status(404).send();
  });

module.exports = app;